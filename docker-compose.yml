name: offensive-security-on-loadbalancer

# Ce scénario reflète notre environnement de production : un serveur Nginx utilisé
# comme load balancer pour les réplicas de notre application. 
# Juste à côté, un service Fail2Ban surveille en quasi temps réel les logs générés,
# constituant ainsi une première ligne de défense contre les menaces potentielles.  

services:
  ######## HERE ATTACKER INFRA ########

  attacker:
    build: 
      context: .
      dockerfile: ./docker/Dockerfile.attack
    depends_on:
      - fail2ban
    networks:
      - internet
    volumes:
      - "./scripts:/scripts"
    
  ######## HERE MY PROD INFRA ########

  ########################################
  ############ INIT FAIL2BAN ########

  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: always
    network_mode: host
    privileged: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on:
      - reverseproxy
    volumes:
      - "./fail2ban/nginx.conf:/data/jail.d/nginx.conf"
      - "./fail2ban/nginx-accesslog.conf:/data/filter.d/nginx-accesslog.conf" 
      - "./nginx/logs/:/var/log/nginx/:ro"

  ########################################
  ############ INIT REVERSE PROXY ########
  reverseproxy:
    image: nginx:stable-alpine3.17-slim
    restart: always
    ports:
      - "172.100.30.1:80:80"
    networks:
      - internet
      - infra
    depends_on:
      - app
    volumes:
      - ./nginx/server.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - "./nginx/logs:/var/log/nginx"

  ########################################
  ############ INIT APP ########

  app:
    image: maissacrement/pock8snodejs
    deploy:
      replicas: 2
    networks:
      - infra


networks:
  infra:
    driver: bridge
    ipam:
      config:
        - subnet: 172.100.30.0/24
          gateway: 172.100.30.1

  internet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.100.40.0/24
          gateway: 172.100.40.1

  monitoring:
    driver: bridge


volumes:
  nglog:

#############Intrusion detection #######

########################################
############ INIT suricata ids ########

    suricata:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.ids
    container_name: suricata
    network_mode: "host"  # pour capter tout le trafic sur la machine
    privileged: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    restart: unless-stopped

#############Monitoring################

########################################
############ INIT loki ########

      loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks:
      - monitoring

########################################
############ INIT promtail ########

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    restart: unless-stopped
    networks:
      - monitoring

########################################
############ INIT Grafana ########

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - monitoring


